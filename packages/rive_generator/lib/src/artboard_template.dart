import 'package:rive_generator/extensions/string.dart';
import 'package:rive_generator/src/rive_reader.dart';

String lazyRiveFileTemplate(
    RiveInfo riveInfo, List<GeneratedArtboard> generatedArtboards) {
  final mainRiveClassName =
      riveInfo.name.capitalize().removeWhitespace().removeIllegalCharacters();
  return '''
// ignore_for_file: type=lint
// THIS FILE WAS AUTOMATICALLY GENERATED BY RIVE_GENERATOR. MODIFICATIONS WILL BE LOST WHEN THE GENERATOR RUNS AGAIN.
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:rive/rive.dart' as rive;
import 'package:rive/src/rive_core/state_machine_controller.dart' as core;

const assetsBaseFolder = "${riveInfo.assetBaseFolder}";

class $mainRiveClassName {
  final rive.RiveFile file;
  static String get assetPath {
    return (kIsWeb ? '' : assetsBaseFolder + '/') + '${riveInfo.assetPath}';
  }

  $mainRiveClassName._(this.file);
  
  static Future<$mainRiveClassName> load() async {
    final riveFile = rive.RiveFile.import(await rootBundle.load($mainRiveClassName.assetPath)); 
    return $mainRiveClassName._(riveFile);
  }

${generatedArtboards.map((e) {
    final lower = e.member;
    return '''
  ${e.type}? _$lower;
  ${e.type} get $lower => _$lower ??= ${e.type}(file.artboardByName('${e.name}')!);
    ''';
  }).join('\n')}

}

${generatedArtboards.map((e) => e.generatedClass()).join('\n')}
 ''';
}

class GeneratedArtboard {
  final Artboard artboard;
  final String name;
  final String type;
  final String member;
  GeneratedArtboard(this.artboard)
      : name = artboard.name,
        type = artboard.name
            .capitalize()
            .removeWhitespace()
            .removeIllegalCharacters(),
        member = artboard.name
            .unCapitalize()
            .removeWhitespace()
            .removeIllegalCharacters();

  List<String> getTriggers(StateMachineTrigger trigger) {
    final triggerName = trigger.name
        .unCapitalize()
        .removeWhitespace()
        .removeIllegalCharacters();

    var triggerType = '';
    var functionCall = '';
    switch (trigger.type) {
      case StateMachineInputType.boolType:
        triggerType = 'rive.SMIBool';
        functionCall =
            "controller.findInput<bool>('${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.doubleType:
        triggerType = 'rive.SMINumber';
        functionCall =
            "controller.findInput<double>('${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.triggerType:
        triggerType = 'rive.SMITrigger';
        functionCall =
            "controller.findInput<bool>('${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.unknown:
        '';
    }

    return ['final $triggerType $triggerName;', '$triggerName = $functionCall'];
  }

  String generatedClass() {
    final animationClassName = '${type}Animations';

    final stateMachines = artboard.stateMachines.map((e) {
      final stateMachineName =
          e.name.removeWhitespace().capitalize().removeIllegalCharacters();
      final stateMachineClassName = '$type${stateMachineName}StateMachine';

      final triggers = e.triggers
          .where((element) =>
              element.type != StateMachineInputType.unknown &&
              element.name.isNotEmpty)
          .map((e) => getTriggers(e));

      return [
        '''
class $stateMachineClassName {
  final rive.StateMachineController controller;
${triggers.map((e) => '  ${e[0]}').join('\n')}
  $stateMachineClassName(this.controller) ${triggers.isNotEmpty ? (':\n${triggers.map((e) => '    ${e[1]}').join(',\n')}') : ''};
}
''',
        '''
$stateMachineClassName get$stateMachineClassName([core.OnStateChange? onStateChange]) {
    return $stateMachineClassName(this.artboard.stateMachineByName("${e.name}",onChange: onStateChange)!);
  }'''
      ];
    });

    return '''
class $type {
  final rive.Artboard artboard;
  $type(this.artboard);

  final animations = const $animationClassName();

  ${stateMachines.map((e) => e[1]).join('\n')}
}

class $animationClassName {
${artboard.animations.map((e) => '  final String ${e.name.unCapitalize().removeWhitespace().removeIllegalCharacters()} = "${e.name}";').join('\n')}
  const $animationClassName();
}

${stateMachines.map((e) => e[0]).join('\n')}
''';
  }
}

class RiveInfo {
  final String assetBaseFolder;
  final String assetPath;
  final String name;

  RiveInfo(this.name, this.assetBaseFolder, this.assetPath);

  @override
  String toString() {
    return name;
  }
}
