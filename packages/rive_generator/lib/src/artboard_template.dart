import 'package:rive_generator/extensions/string.dart';
import 'package:rive_generator/src/rive_reader.dart';

String lazyRiveFileTemplate(
    RiveInfo riveInfo, List<GeneratedArtboard> generatedArtboards) {
  final mainRiveClassName = riveInfo.name.asType;

  return '''
// ignore_for_file: type=lint
// THIS FILE WAS AUTOMATICALLY GENERATED BY RIVE_GENERATOR. MODIFICATIONS WILL BE LOST WHEN THE GENERATOR RUNS AGAIN.
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:rive/rive.dart' as rive;
import 'package:rive/src/rive_core/state_machine_controller.dart' as core;

const assetsBaseFolder = "${riveInfo.assetBaseFolder}";

class $mainRiveClassName {
  final rive.RiveFile file;
  static String get assetPath {
    return (kIsWeb ? '' : assetsBaseFolder + '/') + '${riveInfo.assetPath}';
  }

  $mainRiveClassName._(this.file);
  
  static Future<$mainRiveClassName> load() async {
    final riveFile = rive.RiveFile.import(await rootBundle.load($mainRiveClassName.assetPath)); 
    return $mainRiveClassName._(riveFile);
  }

${generatedArtboards.map((e) {
    final lower = e.member;
    return '''
  ${e.type}? _$lower;
  ${e.type} get $lower => _$lower ??= ${e.type}(file.artboardByName(r'${e.name}')!);
    ''';
  }).join('\n')}

}

${generatedArtboards.map((e) => e.generatedClass()).join('\n')}
 ''';
}

class GeneratedArtboard {
  final Artboard artboard;
  final GeneratedSymbol symbol;

  GeneratedArtboard(this.artboard) : symbol = GeneratedSymbol(artboard.name);

  String get member => symbol.asMember;
  String get name => artboard.name;
  String get type => symbol.asType;

  String generatedClass() {
    final animationClassName = '${type}Animations';

    final stateMachines = artboard.stateMachines.map((e) {
      final stateMachineSymbol = GeneratedSymbol(e.name);

      final stateMachineClassName =
          '$type${stateMachineSymbol.asType}StateMachine';

      final triggers = e.triggers
          .where((element) =>
              element.type != StateMachineInputType.unknown &&
              element.name.isNotEmpty)
          .map((e) => getTriggers(e));

      return [
        '''
class $stateMachineClassName {
  final rive.StateMachineController controller;
${triggers.map((e) => '  ${e[0]}').join('\n')}
  $stateMachineClassName(this.controller) ${triggers.isNotEmpty ? (':\n${triggers.map((e) => '    ${e[1]}').join(',\n')}') : ''};
}
''',
        '''
$stateMachineClassName get$stateMachineClassName([core.OnStateChange? onStateChange]) {
    return $stateMachineClassName(this.artboard.stateMachineByName("${e.name}",onChange: onStateChange)!);
  }'''
      ];
    });

    return '''
class $type {
  final rive.Artboard artboard;
  $type(this.artboard);

  ${artboard.animations.isNotEmpty ? 'final animations = const $animationClassName();\n' : ''}
  ${stateMachines.map((e) => e[1]).join('\n')}
}

${artboard.animations.isNotEmpty ? '''
class $animationClassName {
${artboard.animations.map((e) => '  final String ${GeneratedSymbol(e.name).asMember} = r"${e.name}";').join('\n')}
  const $animationClassName();
}
''' : ''}

${stateMachines.map((e) => e[0]).join('\n')}
''';
  }

  List<String> getTriggers(StateMachineTrigger trigger) {
    final triggerName = GeneratedSymbol(trigger.name);

    var triggerType = '';
    var functionCall = '';
    switch (trigger.type) {
      case StateMachineInputType.boolType:
        triggerType = 'rive.SMIBool';
        functionCall =
            "controller.findInput<bool>(r'${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.doubleType:
        triggerType = 'rive.SMINumber';
        functionCall =
            "controller.findInput<double>(r'${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.triggerType:
        triggerType = 'rive.SMITrigger';
        functionCall =
            "controller.findInput<bool>(r'${trigger.name}') as $triggerType";
        break;
      case StateMachineInputType.unknown:
        '';
    }

    return [
      'final $triggerType ${triggerName.asMember};',
      '${triggerName.asMember} = $functionCall'
    ];
  }
}

class GeneratedSymbol {
  final String input;

  GeneratedSymbol(this.input);

  String get asMember {
    return _handleNumbersOnStart(
      _removeIllegalCharacters(input.unCapitalize().removeWhitespace()),
      'm',
    );
  }

  String get asType {
    return _handleNumbersOnStart(
      _removeIllegalCharacters(input.capitalize().removeWhitespace()),
      'T',
    );
  }

  String _handleNumbersOnStart(String input, String replaceStart) {
    if (input.startsWith(RegExp(r'[0-9]'))) {
      return '$replaceStart$input';
    }
    return input;
  }

  static String _removeIllegalCharacters(String input) {
    return input.replaceAll(RegExp(r'[^A-Za-z0-9$_]'), '');
  }
}

class RiveInfo {
  final String assetBaseFolder;
  final String assetPath;
  final GeneratedSymbol name;

  RiveInfo(String name, this.assetBaseFolder, this.assetPath)
      : name = GeneratedSymbol(name);
}
