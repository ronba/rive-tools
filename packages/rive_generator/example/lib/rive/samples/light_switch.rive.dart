// ignore_for_file: type=lint
// THIS FILE WAS AUTOMATICALLY GENERATED BY RIVE_GENERATOR. MODIFICATIONS WILL BE LOST WHEN THE GENERATOR RUNS AGAIN.
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:rive/rive.dart' as rive;
import 'package:rive/src/rive_core/state_machine_controller.dart' as core;

const assetsBaseFolder = "assets";

class Light_switch {
  final rive.RiveFile file;
  static String get assetPath {
    return (kIsWeb ? '' : assetsBaseFolder + '/') + 'samples/light_switch.riv';
  }

  Light_switch._(this.file);

  static Future<Light_switch> load() async {
    final riveFile =
        rive.RiveFile.import(await rootBundle.load(Light_switch.assetPath));
    return Light_switch._(riveFile);
  }

  NewArtboard? _newArtboard;
  NewArtboard get newArtboard =>
      _newArtboard ??= NewArtboard(file.artboardByName(r'New Artboard')!);
}

class NewArtboard {
  final rive.Artboard artboard;
  NewArtboard(this.artboard);

  final animations = const NewArtboardAnimations();

  NewArtboardSwitchStateMachine getNewArtboardSwitchStateMachine(
      [core.OnStateChange? onStateChange]) {
    return NewArtboardSwitchStateMachine(
        this.artboard.stateMachineByName("Switch", onChange: onStateChange)!);
  }
}

class NewArtboardAnimations {
  final String off = r"Off";
  final String on = r"On";
  const NewArtboardAnimations();
}

class NewArtboardSwitchStateMachine {
  final rive.StateMachineController controller;
  final rive.SMIBool on;
  NewArtboardSwitchStateMachine(this.controller)
      : on = controller.findInput<bool>(r'On') as rive.SMIBool;
}
